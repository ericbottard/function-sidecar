// Code generated by protoc-gen-go. DO NOT EDIT.
// source: function.proto

/*
Package function is a generated protocol buffer package.

It is generated from these files:
	function.proto

It has these top-level messages:
*/
package function

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import fntypes "github.com/projectriff/function-sidecar/pkg/dispatcher/grpc/fntypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StringFunction service

type StringFunctionClient interface {
	Call(ctx context.Context, in *fntypes.Request, opts ...grpc.CallOption) (*fntypes.Reply, error)
}

type stringFunctionClient struct {
	cc *grpc.ClientConn
}

func NewStringFunctionClient(cc *grpc.ClientConn) StringFunctionClient {
	return &stringFunctionClient{cc}
}

func (c *stringFunctionClient) Call(ctx context.Context, in *fntypes.Request, opts ...grpc.CallOption) (*fntypes.Reply, error) {
	out := new(fntypes.Reply)
	err := grpc.Invoke(ctx, "/function.StringFunction/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StringFunction service

type StringFunctionServer interface {
	Call(context.Context, *fntypes.Request) (*fntypes.Reply, error)
}

func RegisterStringFunctionServer(s *grpc.Server, srv StringFunctionServer) {
	s.RegisterService(&_StringFunction_serviceDesc, srv)
}

func _StringFunction_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fntypes.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringFunctionServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/function.StringFunction/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringFunctionServer).Call(ctx, req.(*fntypes.Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _StringFunction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "function.StringFunction",
	HandlerType: (*StringFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _StringFunction_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "function.proto",
}

func init() { proto.RegisterFile("function.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2b, 0xcd, 0x4b,
	0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0x78,
	0xd3, 0xf2, 0x4a, 0x2a, 0x0b, 0x52, 0x8b, 0x21, 0x12, 0x46, 0x36, 0x5c, 0x7c, 0xc1, 0x25, 0x45,
	0x99, 0x79, 0xe9, 0x6e, 0x50, 0x05, 0x42, 0x5a, 0x5c, 0x2c, 0xce, 0x89, 0x39, 0x39, 0x42, 0x02,
	0x7a, 0x30, 0x95, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x7c, 0x48, 0x22, 0x05, 0x39,
	0x95, 0x4a, 0x0c, 0x4e, 0x16, 0x5c, 0x2a, 0x99, 0xf9, 0x20, 0x93, 0xb2, 0x52, 0x93, 0x4b, 0x8a,
	0x32, 0xd3, 0xd2, 0xf4, 0x8a, 0x33, 0x53, 0x52, 0x93, 0x13, 0x8b, 0xf4, 0xd2, 0x8b, 0x0a, 0x92,
	0xf5, 0x60, 0x96, 0x3a, 0xf1, 0xc1, 0x4c, 0x0f, 0x00, 0x59, 0x5a, 0x1c, 0xc0, 0x90, 0xc4, 0x06,
	0xb6, 0xde, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xba, 0x82, 0xeb, 0xae, 0xa9, 0x00, 0x00, 0x00,
}
