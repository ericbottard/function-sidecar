// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fntypes.proto

/*
Package fntypes is a generated protocol buffer package.

It is generated from these files:
	fntypes.proto

It has these top-level messages:
	Request
	Reply
*/
package fntypes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

//
// TODO: Reply can be Empty for sink behavior. Maybe we should create a separate RPC for sink.
// For now the Dispatcher can check the return type and decide to output the Reply.
type Reply struct {
	// Types that are valid to be assigned to Type:
	//	*Reply_Body
	//	*Reply_Void
	Type isReply_Type `protobuf_oneof:"type"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isReply_Type interface {
	isReply_Type()
}

type Reply_Body struct {
	Body string `protobuf:"bytes,1,opt,name=body,oneof"`
}
type Reply_Void struct {
	Void *google_protobuf.Empty `protobuf:"bytes,2,opt,name=void,oneof"`
}

func (*Reply_Body) isReply_Type() {}
func (*Reply_Void) isReply_Type() {}

func (m *Reply) GetType() isReply_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Reply) GetBody() string {
	if x, ok := m.GetType().(*Reply_Body); ok {
		return x.Body
	}
	return ""
}

func (m *Reply) GetVoid() *google_protobuf.Empty {
	if x, ok := m.GetType().(*Reply_Void); ok {
		return x.Void
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Reply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Reply_OneofMarshaler, _Reply_OneofUnmarshaler, _Reply_OneofSizer, []interface{}{
		(*Reply_Body)(nil),
		(*Reply_Void)(nil),
	}
}

func _Reply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Reply)
	// type
	switch x := m.Type.(type) {
	case *Reply_Body:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Body)
	case *Reply_Void:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Void); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Reply.Type has unexpected type %T", x)
	}
	return nil
}

func _Reply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Reply)
	switch tag {
	case 1: // type.body
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Type = &Reply_Body{x}
		return true, err
	case 2: // type.void
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Empty)
		err := b.DecodeMessage(msg)
		m.Type = &Reply_Void{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Reply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Reply)
	// type
	switch x := m.Type.(type) {
	case *Reply_Body:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Body)))
		n += len(x.Body)
	case *Reply_Void:
		s := proto.Size(x.Void)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Request)(nil), "fntypes.Request")
	proto.RegisterType((*Reply)(nil), "fntypes.Reply")
}

func init() { proto.RegisterFile("fntypes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xcb, 0x2b, 0xa9,
	0x2c, 0x48, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0xa5, 0xa4, 0xd3,
	0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xc2, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25,
	0x95, 0x10, 0x55, 0x4a, 0xb2, 0x5c, 0xec, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42,
	0x5c, 0x2c, 0x49, 0xf9, 0x29, 0x95, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x52,
	0x30, 0x17, 0x6b, 0x50, 0x6a, 0x41, 0x4e, 0xa5, 0x90, 0x08, 0xb2, 0xa4, 0x07, 0x03, 0x44, 0x5a,
	0x48, 0x87, 0x8b, 0xa5, 0x2c, 0x3f, 0x33, 0x45, 0x82, 0x49, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x4c,
	0x0f, 0x62, 0x93, 0x1e, 0xcc, 0x26, 0x3d, 0x57, 0x90, 0x4d, 0x20, 0xd5, 0x20, 0x55, 0x4e, 0x6c,
	0x5c, 0x2c, 0x20, 0x17, 0x39, 0x99, 0x70, 0xc9, 0x64, 0xe6, 0xeb, 0x15, 0x67, 0x5b, 0x14, 0xeb,
	0x15, 0x67, 0xa6, 0xa4, 0x26, 0x27, 0x16, 0xe9, 0xa5, 0x17, 0x15, 0x24, 0xeb, 0x41, 0x1d, 0xec,
	0x24, 0xe4, 0x56, 0x9a, 0x97, 0x5c, 0x92, 0x99, 0x9f, 0x17, 0x52, 0x59, 0x90, 0x1a, 0x00, 0x32,
	0xab, 0x38, 0x80, 0x21, 0x89, 0x0d, 0x6c, 0xaa, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xca,
	0x3e, 0x32, 0xe7, 0x00, 0x00, 0x00,
}
